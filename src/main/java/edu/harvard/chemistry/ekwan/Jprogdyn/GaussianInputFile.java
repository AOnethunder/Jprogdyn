package edu.harvard.chemistry.ekwan.Jprogdyn;

import java.io.*;
import java.util.*;
import org.apache.commons.math3.geometry.euclidean.threed.*;

/**
 * This class represent a Gaussian input file.
 */
public class GaussianInputFile extends InputFileFormat {
    
    /** For serialization. */
    public static final long serialVersionUID = 1L;

    /**
     * Creates a GJF file.  Terminate the headers with two newlines.
     * @param molecule the template molecule where atom symbols, charge, and multiplicity will be read from (mandatory)
     * @param positions the geometry to use (if set to null, uses the molecule's original geometry)
     * @param method the header and footer information
     */
    public GaussianInputFile(Molecule molecule, List<Vector3D> positions, GaussianCalculationMethod method) {
        super(getGaussianString(molecule, positions, method));
    }

    /**
     * This helper method creates the actual text of the input file given the requested calculation method.
     * @param molecule a template molecule
     * @param positions the positions to write out
     * @param method the header and footer information
     */
    private static String getGaussianString(Molecule molecule, List<Vector3D> positions, GaussianCalculationMethod method) {
        // check invariants
        if ( molecule == null )
            throw new NullPointerException("null molecule");
        if ( positions != null && positions.size() != molecule.contents.size() )
            throw new IllegalArgumentException("size of positions does not match number of atoms in molecule");
        if ( ! method.routeCard.contains("#p") )
            throw new IllegalArgumentException("you should set the print level to #p in the route card");

        // add header
        StringBuilder s = new StringBuilder();
        s.append("%chk=Jprogdyn.chk\n");
        if ( method.processors > 1 )
            s.append(String.format("%%nprocshared=%d\n", method.processors));
        s.append(String.format("%%mem=%dGB\n", method.memory));
        s.append(method.routeCard + "\n\nauto-generated by Jprogdyn\n\n");
        s.append(String.format("%d %d\n", molecule.charge, molecule.multiplicity));
        
        // add geometry
        List<Vector3D> xyz = null;
        if ( positions == null ) {
                xyz = new ArrayList<>(molecule.contents.size());
                for (Atom a : molecule.contents)
                    xyz.add(a.position);
            }
        else
            xyz = positions;
        for (int i=0; i < molecule.contents.size(); i++) {
                String symbol = molecule.contents.get(i).symbol;
                double x = xyz.get(i).getX();
                double y = xyz.get(i).getY();
                double z = xyz.get(i).getZ();
                s.append(String.format("   %-5s     %15.10f    %15.10f    %15.10f\n", symbol, x, y, z));
            }
        s.append("\n");

        // add the footer
        if ( method.footer.trim().length() > 0 )
            s.append(method.footer + "\n");
        s.append("\n\n");

        // return the result
        return s.toString();
    }

    @Override
    public String toString() {
        return stringRepresentation;
    }

    @Override
    public int hashCode() {
        return Objects.hash(stringRepresentation);
    }

    @Override
    public boolean equals(Object obj) {
        if ( obj == null )
            return false;
        if ( obj == this )
            return true;
        if ( !(obj instanceof GaussianInputFile) )
            return false;

        GaussianInputFile f = (GaussianInputFile)obj;
        if ( Objects.equals(f.stringRepresentation, stringRepresentation) )
            return true;
        return false;
    }
}
